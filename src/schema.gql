# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Profile {
  image: String
  bio: String
}

type User {
  _id: ID!
  name: String!
  email: String!
  profile: Profile
  friends: [ID!]!
  friendRequests: [ID!]!
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Notification {
  _id: ID!
  recipient: ID!
  sender: ID!
  type: String!
  message: String!
  isRead: Boolean!
  createdAt: DateTime!
}

type LoginResponse {
  access_token: String!
}

type RegisterResponse {
  user: User!
}

type Post {
  _id: ID!
  userId: ID!
  content: String!
  media: [String!]
  likeCount: Float!
  commentCount: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Comment {
  _id: ID!
  postId: ID!
  userId: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Like {
  _id: ID!
  userId: ID!
  postId: ID!
  createdAt: DateTime!
}

type Share {
  _id: ID!
  userId: ID!
  postId: ID!
  caption: String
  sharedAt: DateTime!
}

type PaginationMeta {
  total: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
}

type PaginatedUsers {
  data: [User!]!
  meta: PaginationMeta!
}

type PaginatedPosts {
  data: [Post!]!
  meta: PaginationMeta!
}

type PaginatedShares {
  data: [Share!]!
  meta: PaginationMeta!
}

type Query {
  getUserprofile(userId: String!): User!
  getFriends(userId: String!): [User!]!
  getNotifications(userId: ID!): [Notification!]!
  postsFeed(limit: Int, offset: Int): [Post!]!
  post(id: ID!): Post!
  comments: [Comment!]!
  comment(id: ID!): Comment!
  share(userId: ID!, page: Int! = 1, limit: Int! = 10): [Share!]!
  searchUsers(keyword: String!, page: Int! = 1, limit: Int! = 10): PaginatedUsers!
  searchPosts(keyword: String!, page: Int! = 1, limit: Int! = 10): PaginatedPosts!
  searchCaptions(keyword: String!, page: Int! = 1, limit: Int! = 10): PaginatedShares!
}

type Mutation {
  addOrUpdateBio(updateBioInput: UpdateBioInput!): User!
  deleteProfileImage(userId: String!): String!
  sendFriendRequest(sendFriendRequestInput: SendFriendRequestInput!): String!
  acceptFriendRequest(acceptFriendRequestInput: AcceptFriendRequestInput!): String!
  cancelFriendRequest(cancelFriendRequestInput: CancelFriendRequestInput!): String!
  markNotificationAsRead(notificationId: ID!): Notification!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  register(registerUserInput: RegisterUserInput!): RegisterResponse!
  createPost(createPostInput: CreatePostInput!): Post!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  removePost(id: ID!): String!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(id: ID!): Comment!
  createLike(createLikeInput: CreateLikeInput!): Like!
  removeLike(postId: ID!, userId: ID!): Like!
  createShare(createShareInput: CreateShareInput!): Share!
  updateShare(updateShareInput: UpdateShareInput!): Share!
  removeShare(id: Int!): Share!
}

input UpdateBioInput {
  userId: ID!
  bio: String!
}

input SendFriendRequestInput {
  senderId: ID!
  receiverId: ID!
}

input AcceptFriendRequestInput {
  senderId: ID!
  receiverId: ID!
}

input CancelFriendRequestInput {
  senderId: ID!
  receiverId: ID!
}

input LoginUserInput {
  email: String!
  password: String!
}

input RegisterUserInput {
  name: String!
  email: String!
  password: String!
}

input CreatePostInput {
  userId: ID!
  content: String!
  media: [String!]
}

input UpdatePostInput {
  postId: ID!
  content: String
  media: [String!]
}

input CreateCommentInput {
  postId: ID!
  userId: ID!
  content: String!
}

input UpdateCommentInput {
  id: ID!
  content: String
}

input CreateLikeInput {
  postId: ID!
  userId: ID!
}

input CreateShareInput {
  postId: ID!
  userId: ID!
  caption: String
}

input UpdateShareInput {
  shareId: ID!
  postId: ID!
  userId: ID!
  caption: String
}

type Subscription {
  notificationAdded(userId: ID!): Notification!
}